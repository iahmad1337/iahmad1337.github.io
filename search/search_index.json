{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"iahmad1337 TLPI fanclub \u041a\u043b\u0443\u0431 \u043a\u0440\u0430\u0441\u043d\u043e\u0433\u043b\u0430\u0437\u0438\u043a\u043e\u0432 Read more \u2192 Cheat Sheet Read more \u2192 Garage Sale Read more \u2192 IT Security Read more \u2192 Linux Administration \u0417\u0430\u043c\u0435\u0442\u043a\u0438 \u0441 \u0443\u043d\u0438\u0432\u0435\u0440\u0441\u043a\u043e\u0433\u043e \u043a\u0443\u0440\u0441\u0430 \u043f\u043e \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e Read more \u2192","title":"Home"},{"location":"#iahmad1337","text":"","title":"iahmad1337"},{"location":"#tlpi-fanclub","text":"\u041a\u043b\u0443\u0431 \u043a\u0440\u0430\u0441\u043d\u043e\u0433\u043b\u0430\u0437\u0438\u043a\u043e\u0432 Read more \u2192","title":"TLPI fanclub"},{"location":"#cheat-sheet","text":"Read more \u2192","title":"Cheat Sheet"},{"location":"#garage-sale","text":"Read more \u2192","title":"Garage Sale"},{"location":"#it-security","text":"Read more \u2192","title":"IT Security"},{"location":"#linux-administration","text":"\u0417\u0430\u043c\u0435\u0442\u043a\u0438 \u0441 \u0443\u043d\u0438\u0432\u0435\u0440\u0441\u043a\u043e\u0433\u043e \u043a\u0443\u0440\u0441\u0430 \u043f\u043e \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e Read more \u2192","title":"Linux Administration"},{"location":"cheat-sheet/","text":"Cheat Sheet Quick reference guide. Common Commands A paragraph with frequently used command examples.","title":"cheat sheet"},{"location":"cheat-sheet/#cheat-sheet","text":"Quick reference guide.","title":"Cheat Sheet"},{"location":"cheat-sheet/#common-commands","text":"A paragraph with frequently used command examples.","title":"Common Commands"},{"location":"garage-sale/","text":"Garage Sale Upcoming sales and items.","title":"garage sale"},{"location":"garage-sale/#garage-sale","text":"Upcoming sales and items.","title":"Garage Sale"},{"location":"itsec/","text":"itsec stub","title":"Security"},{"location":"linux-admin/","text":"Linux Administration Kek","title":"Linux Amdinistration"},{"location":"linux-admin/#linux-administration","text":"Kek","title":"Linux Administration"},{"location":"tlpi/","text":"TLPI Page Meeting Scheduled on 11:00 (Moscow, GMT+3) every sunday Enter password: Convert // Fixed byte array for XOR operation (you can change this) const encodedResult = [4, 29, 26, 5, 0, 23, 77, 78, 26, 7, 93, 78, 7, 9, 67, 10, 15, 25, 31, 2, 8, 14, 5, 2, 92, 0, 41, 33, 8, 14, 3, 34, 22, 111, 82, 52, 43, 94, 61, 26, 89, 80, 6, 80, 89, 4, 11, 69, 3, 7, 34, 5, 10, 122, 94, 86, 88, 29, 6, 2, 35, 120, 80, 81, 1, 3, 23, 100]; document.getElementById('xorForm').addEventListener('submit', function(e) { e.preventDefault(); // Get input text const inputText = document.getElementById('inputText').value.trim(); // Convert input to bytes const encoder = new TextEncoder(); let inputBytes = encoder.encode(inputText); if (inputBytes.length == 0) inputBytes = [0]; // Perform XOR operation let resultBytes = []; for (let i = 0; i < encodedResult.length; i++) { resultBytes.push(inputBytes[i % inputBytes.length] ^ encodedResult[i]); } // const crypto = require('crypto'); window.crypto.subtle.digest(\"SHA-256\", new Uint8Array(resultBytes)).then(hashBuffer => { // const hashBuffer = window.crypto.subtle.digest(\"SHA-256\", new Uint8Array(resultBytes)); const hashArray = Array.from(new Uint8Array(hashBuffer)); const hash = hashArray .map((item) => item.toString(16).padStart(2, \"0\")) .join(\"\"); console.log(hashBuffer) console.log(hash) const outputDiv = document.getElementById('output'); if (hash !== '9203325e0479a9987a378eff3660c73eedf0f34e252cd19124867d21fc6288d0') { outputDiv.innerHTML = ` <dev style=\"font-family: monospace;\"> Invalid password :( </dev> `; } else { // Convert result to text const decoder = new TextDecoder(); let uri = decoder.decode(Uint8Array.from(resultBytes)); outputDiv.innerHTML = ` <h3>Your link:</h3> <a href=\"${uri}\" onclick=\"return false;\" style=\"font-family: monospace;\"> ${uri} </a> `; } }); }); Chapter 56 \"Sockets: Introduction\" Notes from 07.09.2025 One of the possible problems of using sockets POSIX API are strict aliasing rules that are very hard to follow Example of how the solutions to exercises can be organized: https://github.com/iahmad1337/linux-learning/tree/main/linux-programming-interface/chapters How to get LSP support for the code in the book: 8 wget https://man7.org/tlpi/code/download/tlpi-250328-dist.tar.gz 9 ls 10 tar -xf tlpi-250328-dist.tar.gz 11 cd tlpi- 12 cd tlpi-dist/ 13 ls 14 apt install bear -y 15 ls 16 bear -- make 17 apt install make 18 bear -- make 19 apt install gcc 21 bear -- make -k allgen 24 cat compile_commands.json Chapter 57 \"Sockets: UNIX Domain\" Meeting is planned on 28.09.2025 at 11:00 (Moscow time)","title":"Red Eye Club"},{"location":"tlpi/#tlpi-page","text":"","title":"TLPI Page"},{"location":"tlpi/#meeting","text":"Scheduled on 11:00 (Moscow, GMT+3) every sunday Enter password: Convert // Fixed byte array for XOR operation (you can change this) const encodedResult = [4, 29, 26, 5, 0, 23, 77, 78, 26, 7, 93, 78, 7, 9, 67, 10, 15, 25, 31, 2, 8, 14, 5, 2, 92, 0, 41, 33, 8, 14, 3, 34, 22, 111, 82, 52, 43, 94, 61, 26, 89, 80, 6, 80, 89, 4, 11, 69, 3, 7, 34, 5, 10, 122, 94, 86, 88, 29, 6, 2, 35, 120, 80, 81, 1, 3, 23, 100]; document.getElementById('xorForm').addEventListener('submit', function(e) { e.preventDefault(); // Get input text const inputText = document.getElementById('inputText').value.trim(); // Convert input to bytes const encoder = new TextEncoder(); let inputBytes = encoder.encode(inputText); if (inputBytes.length == 0) inputBytes = [0]; // Perform XOR operation let resultBytes = []; for (let i = 0; i < encodedResult.length; i++) { resultBytes.push(inputBytes[i % inputBytes.length] ^ encodedResult[i]); } // const crypto = require('crypto'); window.crypto.subtle.digest(\"SHA-256\", new Uint8Array(resultBytes)).then(hashBuffer => { // const hashBuffer = window.crypto.subtle.digest(\"SHA-256\", new Uint8Array(resultBytes)); const hashArray = Array.from(new Uint8Array(hashBuffer)); const hash = hashArray .map((item) => item.toString(16).padStart(2, \"0\")) .join(\"\"); console.log(hashBuffer) console.log(hash) const outputDiv = document.getElementById('output'); if (hash !== '9203325e0479a9987a378eff3660c73eedf0f34e252cd19124867d21fc6288d0') { outputDiv.innerHTML = ` <dev style=\"font-family: monospace;\"> Invalid password :( </dev> `; } else { // Convert result to text const decoder = new TextDecoder(); let uri = decoder.decode(Uint8Array.from(resultBytes)); outputDiv.innerHTML = ` <h3>Your link:</h3> <a href=\"${uri}\" onclick=\"return false;\" style=\"font-family: monospace;\"> ${uri} </a> `; } }); });","title":"Meeting"},{"location":"tlpi/#chapter-56-sockets-introduction","text":"Notes from 07.09.2025 One of the possible problems of using sockets POSIX API are strict aliasing rules that are very hard to follow Example of how the solutions to exercises can be organized: https://github.com/iahmad1337/linux-learning/tree/main/linux-programming-interface/chapters How to get LSP support for the code in the book: 8 wget https://man7.org/tlpi/code/download/tlpi-250328-dist.tar.gz 9 ls 10 tar -xf tlpi-250328-dist.tar.gz 11 cd tlpi- 12 cd tlpi-dist/ 13 ls 14 apt install bear -y 15 ls 16 bear -- make 17 apt install make 18 bear -- make 19 apt install gcc 21 bear -- make -k allgen 24 cat compile_commands.json","title":"Chapter 56 \"Sockets: Introduction\""},{"location":"tlpi/#chapter-57-sockets-unix-domain","text":"Meeting is planned on 28.09.2025 at 11:00 (Moscow time)","title":"Chapter 57 \"Sockets: UNIX Domain\""}]}