{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"iahmad1337 TLPI fanclub \u041a\u043b\u0443\u0431 \u043a\u0440\u0430\u0441\u043d\u043e\u0433\u043b\u0430\u0437\u0438\u043a\u043e\u0432 Read more \u2192 Cheat Sheet Read more \u2192 Garage Sale Read more \u2192 IT Security Read more \u2192 Linux Administration \u0417\u0430\u043c\u0435\u0442\u043a\u0438 \u0441 \u0443\u043d\u0438\u0432\u0435\u0440\u0441\u043a\u043e\u0433\u043e \u043a\u0443\u0440\u0441\u0430 \u043f\u043e \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e Read more \u2192","title":"Home"},{"location":"#iahmad1337","text":"","title":"iahmad1337"},{"location":"#tlpi-fanclub","text":"\u041a\u043b\u0443\u0431 \u043a\u0440\u0430\u0441\u043d\u043e\u0433\u043b\u0430\u0437\u0438\u043a\u043e\u0432 Read more \u2192","title":"TLPI fanclub"},{"location":"#cheat-sheet","text":"Read more \u2192","title":"Cheat Sheet"},{"location":"#garage-sale","text":"Read more \u2192","title":"Garage Sale"},{"location":"#it-security","text":"Read more \u2192","title":"IT Security"},{"location":"#linux-administration","text":"\u0417\u0430\u043c\u0435\u0442\u043a\u0438 \u0441 \u0443\u043d\u0438\u0432\u0435\u0440\u0441\u043a\u043e\u0433\u043e \u043a\u0443\u0440\u0441\u0430 \u043f\u043e \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e Read more \u2192","title":"Linux Administration"},{"location":"cheat-sheet/","text":"Bash ag \"message ProtoMessage\" -G \".*\\.proto$\" time soap make -i my_target && tmux display-popup -E sleep 1 && (cd testdir/my_target && ./test.sh &>/tmp/testlog; less /tmp/testlog) curl -d private=0 -d name=ahmad1337 -d api_dev_key=$key -d api_paste_name=\"file.cpp\" --data-urlencode text@/tmp/file.cpp https://paste228.com/api/v2/publish svn diff -r r10:r22 --summarize ^/branches/ahmad1337/TICKET-228 # calculator python3 -c \"print(2**20)\" svn diff -r HEAD:PREV config.xml svn diff -r HEAD:{2025-01-20} path/to/file.cpp combinediff header.hpp.diff source.cpp.diff >>result.diff # sort files by sizes accounting for suffixes (K for kilo, M for mega and etc.) (for i in $(ls); do du -xhs $i; done) | sort --key=1 -h # scp via jumphost-2 (is configured in ~/.ssh/config) scp -F ~/.ssh/config -J jumphost-2 ahmad1337@my.machine.ru:/tmp/logs.tar.gz . # Interpret bytes as x64 instructions ndisasm -a -b64 machine-code-dump # skip first 5 bytes ndisasm -e 5 -b64 # skip the bytes in range [4, 7) ndisasm -k 4,3 -b64 # compile to demangled asm (pre-linker) g++ -std=c++17 -S -masm=intel src/01-qlibs-jmp.cc -fPIC -I./include -o - | c++filt >jmp.asm # post-linker disasm g++ -std=c++17 src/03* -fPIC -I./include -g -o 03.out && objdump --disassemble -Mintel 03.out | c++filt >03.asm # get sections of and ELF file (+ their write/execute permissions) readelf -S my-program # check that function is indeed in the executable nm my-test-executable | grep SpecificTest | c++filt # List all files, opened by PID lsof -p <PID> # get environ of a process strings /proc/<PID>/environ # remove all invalid utf-8 sequences from file iconv -f utf-8 -t utf-8 -c file.txt GDB # launch gdb with some pre-run commands gdb -x gdb-commands.txt html_idx # print program output at terminal /dev/pts/15 (can be determined by writing tty # in target terminal gdb --tty=/dev/pts/15 -x /tmp/gdb-commands.txt --args ./binary-name --some-binary-flag --flag-2 fin (finish) - execute entire current frame and go back to parent frame u (until) 145 - execute all commands up until (but not including) line 145 backtrace (bt) - print backtrace bt full - backtrace with local variables down, up - go up and down the backtrace print <expression> - ochevidno # source viewing dir /home/ahmad1337/worktree/ - add one more lookup path for sources show directories - show the source lookup paths list src/kek.cpp:42 - go to this location # TUI tui enable/disable - can be toggled with \"ctrl-x + a\" Example debugger script with scrollback + output in separate terminals: #!/usr/bin/env bash cat << EOF >/tmp/gdb-script.txt tui enable tty /dev/pts/18 set trace-commands on set logging on EOF pushd build ninja && gdb -x /tmp/gdb-script.txt ./${BIN:-04-multithreaded} popd set trace-commands on & set logging on sends all output of gdb commands to $WORK_DIR/gdb.txt, which can be viewed in another terminal pane using tail -f gdb.txt tty /dev/pts/18 sends all program output to terminal /dev/pts/18 (can be determined via tty shell command. network # send one tcp request and wait for a response head -n1 queries-concatenated.txt | nc --no-shutdown -4 8.8.8.8 8000 # Get IP of a hostname (single AA/AAAA record) $ host 1.host.com # concrete instance (1 host) 1.host.com has address 10.20.6.2 # Name all AA/AAAA records behind this domain (in case of round-robin DNS) $ host host.com # all instances on cloud HC host.com has address 10.20.6.2 host.com has address 10.20.6.4 host.com has address 10.20.6.5 host.com has address 10.20.6.3 host.com has address 10.20.6.6 # List the listened-on ports and corresponding processes ss -tlnp processes # see all mappings of a process that take tens and hundreds of megabytes grep -B4 -E \"Rss:[[:blank:]]*[0-9]{5,6}\" /proc/273/smaps # Calculate honest RSS of a process that contains \"worker\" in its full command line cat /proc/$(pgrep --full --oldest worker)/smaps | grep Rss | awk '{s += $2}END{print s/1024 \" MiB\"}' 2>/dev/null | grep MiB # show all processes and the their entire command line ps all -e ww # kill process by name pkill --signal SIGKILL \"udp_shooter\" # use -f for full process command match # show memory map sizes of a process pmap $(pgrep --full --oldest worker) | sort -n -k2 # Show all (-e) processes + threads (-T) + full command (-f). Ps doesn't show separate threads by default ps -efT # Show all threads named \"worker\" for user ahamd1337 ps -u ahmad1337 -fT | grep worker system # check, if kernel was compiled with CONFIG_FTRACE option (/boot/config-* may also be in /proc/config.gz) for i in /boot/config-*; do zgrep \"CONFIG_FTRACE\" \"$i\"; done vim :%!c++filt -- demangle mangled identifiers in file (works for disasm or any -- other human-readable file) :g/worker-1[0-9]/d -- remove lines matching the pattern git # status without untracked files git status -uno","title":"cheat sheet"},{"location":"cheat-sheet/#bash","text":"ag \"message ProtoMessage\" -G \".*\\.proto$\" time soap make -i my_target && tmux display-popup -E sleep 1 && (cd testdir/my_target && ./test.sh &>/tmp/testlog; less /tmp/testlog) curl -d private=0 -d name=ahmad1337 -d api_dev_key=$key -d api_paste_name=\"file.cpp\" --data-urlencode text@/tmp/file.cpp https://paste228.com/api/v2/publish svn diff -r r10:r22 --summarize ^/branches/ahmad1337/TICKET-228 # calculator python3 -c \"print(2**20)\" svn diff -r HEAD:PREV config.xml svn diff -r HEAD:{2025-01-20} path/to/file.cpp combinediff header.hpp.diff source.cpp.diff >>result.diff # sort files by sizes accounting for suffixes (K for kilo, M for mega and etc.) (for i in $(ls); do du -xhs $i; done) | sort --key=1 -h # scp via jumphost-2 (is configured in ~/.ssh/config) scp -F ~/.ssh/config -J jumphost-2 ahmad1337@my.machine.ru:/tmp/logs.tar.gz . # Interpret bytes as x64 instructions ndisasm -a -b64 machine-code-dump # skip first 5 bytes ndisasm -e 5 -b64 # skip the bytes in range [4, 7) ndisasm -k 4,3 -b64 # compile to demangled asm (pre-linker) g++ -std=c++17 -S -masm=intel src/01-qlibs-jmp.cc -fPIC -I./include -o - | c++filt >jmp.asm # post-linker disasm g++ -std=c++17 src/03* -fPIC -I./include -g -o 03.out && objdump --disassemble -Mintel 03.out | c++filt >03.asm # get sections of and ELF file (+ their write/execute permissions) readelf -S my-program # check that function is indeed in the executable nm my-test-executable | grep SpecificTest | c++filt # List all files, opened by PID lsof -p <PID> # get environ of a process strings /proc/<PID>/environ # remove all invalid utf-8 sequences from file iconv -f utf-8 -t utf-8 -c file.txt","title":"Bash"},{"location":"cheat-sheet/#gdb","text":"# launch gdb with some pre-run commands gdb -x gdb-commands.txt html_idx # print program output at terminal /dev/pts/15 (can be determined by writing tty # in target terminal gdb --tty=/dev/pts/15 -x /tmp/gdb-commands.txt --args ./binary-name --some-binary-flag --flag-2 fin (finish) - execute entire current frame and go back to parent frame u (until) 145 - execute all commands up until (but not including) line 145 backtrace (bt) - print backtrace bt full - backtrace with local variables down, up - go up and down the backtrace print <expression> - ochevidno # source viewing dir /home/ahmad1337/worktree/ - add one more lookup path for sources show directories - show the source lookup paths list src/kek.cpp:42 - go to this location # TUI tui enable/disable - can be toggled with \"ctrl-x + a\" Example debugger script with scrollback + output in separate terminals: #!/usr/bin/env bash cat << EOF >/tmp/gdb-script.txt tui enable tty /dev/pts/18 set trace-commands on set logging on EOF pushd build ninja && gdb -x /tmp/gdb-script.txt ./${BIN:-04-multithreaded} popd set trace-commands on & set logging on sends all output of gdb commands to $WORK_DIR/gdb.txt, which can be viewed in another terminal pane using tail -f gdb.txt tty /dev/pts/18 sends all program output to terminal /dev/pts/18 (can be determined via tty shell command.","title":"GDB"},{"location":"cheat-sheet/#network","text":"# send one tcp request and wait for a response head -n1 queries-concatenated.txt | nc --no-shutdown -4 8.8.8.8 8000 # Get IP of a hostname (single AA/AAAA record) $ host 1.host.com # concrete instance (1 host) 1.host.com has address 10.20.6.2 # Name all AA/AAAA records behind this domain (in case of round-robin DNS) $ host host.com # all instances on cloud HC host.com has address 10.20.6.2 host.com has address 10.20.6.4 host.com has address 10.20.6.5 host.com has address 10.20.6.3 host.com has address 10.20.6.6 # List the listened-on ports and corresponding processes ss -tlnp","title":"network"},{"location":"cheat-sheet/#processes","text":"# see all mappings of a process that take tens and hundreds of megabytes grep -B4 -E \"Rss:[[:blank:]]*[0-9]{5,6}\" /proc/273/smaps # Calculate honest RSS of a process that contains \"worker\" in its full command line cat /proc/$(pgrep --full --oldest worker)/smaps | grep Rss | awk '{s += $2}END{print s/1024 \" MiB\"}' 2>/dev/null | grep MiB # show all processes and the their entire command line ps all -e ww # kill process by name pkill --signal SIGKILL \"udp_shooter\" # use -f for full process command match # show memory map sizes of a process pmap $(pgrep --full --oldest worker) | sort -n -k2 # Show all (-e) processes + threads (-T) + full command (-f). Ps doesn't show separate threads by default ps -efT # Show all threads named \"worker\" for user ahamd1337 ps -u ahmad1337 -fT | grep worker","title":"processes"},{"location":"cheat-sheet/#system","text":"# check, if kernel was compiled with CONFIG_FTRACE option (/boot/config-* may also be in /proc/config.gz) for i in /boot/config-*; do zgrep \"CONFIG_FTRACE\" \"$i\"; done","title":"system"},{"location":"cheat-sheet/#vim","text":":%!c++filt -- demangle mangled identifiers in file (works for disasm or any -- other human-readable file) :g/worker-1[0-9]/d -- remove lines matching the pattern","title":"vim"},{"location":"cheat-sheet/#git","text":"# status without untracked files git status -uno","title":"git"},{"location":"garage-sale/","text":"Garage Sale Upcoming sales and items.","title":"garage sale"},{"location":"garage-sale/#garage-sale","text":"Upcoming sales and items.","title":"Garage Sale"},{"location":"itsec/","text":"itsec stub","title":"Security"},{"location":"linux-admin/","text":"Linux Administration Kek","title":"Linux Amdinistration"},{"location":"linux-admin/#linux-administration","text":"Kek","title":"Linux Administration"},{"location":"tlpi/","text":"TLPI Page Meeting Scheduled on 11:00 (Moscow, GMT+3) every sunday Enter password: Convert // Fixed byte array for XOR operation (you can change this) const encodedResult = [4, 29, 26, 5, 0, 23, 77, 78, 26, 7, 93, 78, 7, 9, 67, 10, 15, 25, 31, 2, 8, 14, 5, 2, 92, 0, 41, 33, 8, 14, 3, 34, 22, 111, 82, 52, 43, 94, 61, 26, 89, 80, 6, 80, 89, 4, 11, 69, 3, 7, 34, 5, 10, 122, 94, 86, 88, 29, 6, 2, 35, 120, 80, 81, 1, 3, 23, 100]; document.getElementById('xorForm').addEventListener('submit', function(e) { e.preventDefault(); // Get input text const inputText = document.getElementById('inputText').value.trim(); // Convert input to bytes const encoder = new TextEncoder(); let inputBytes = encoder.encode(inputText); if (inputBytes.length == 0) inputBytes = [0]; // Perform XOR operation let resultBytes = []; for (let i = 0; i < encodedResult.length; i++) { resultBytes.push(inputBytes[i % inputBytes.length] ^ encodedResult[i]); } // const crypto = require('crypto'); window.crypto.subtle.digest(\"SHA-256\", new Uint8Array(resultBytes)).then(hashBuffer => { // const hashBuffer = window.crypto.subtle.digest(\"SHA-256\", new Uint8Array(resultBytes)); const hashArray = Array.from(new Uint8Array(hashBuffer)); const hash = hashArray .map((item) => item.toString(16).padStart(2, \"0\")) .join(\"\"); console.log(hashBuffer) console.log(hash) const outputDiv = document.getElementById('output'); if (hash !== '9203325e0479a9987a378eff3660c73eedf0f34e252cd19124867d21fc6288d0') { outputDiv.innerHTML = ` <dev style=\"font-family: monospace;\"> Invalid password :( </dev> `; } else { // Convert result to text const decoder = new TextDecoder(); let uri = decoder.decode(Uint8Array.from(resultBytes)); outputDiv.innerHTML = ` <h3>Your link:</h3> <a href=\"${uri}\" onclick=\"return false;\" style=\"font-family: monospace;\"> ${uri} </a> `; } }); }); Chapter 56 \"Sockets: Introduction\" Notes from 07.09.2025 One of the possible problems of using sockets POSIX API are strict aliasing rules that are very hard to follow Example of how the solutions to exercises can be organized: https://github.com/iahmad1337/linux-learning/tree/main/linux-programming-interface/chapters How to get LSP support for the code in the book: 8 wget https://man7.org/tlpi/code/download/tlpi-250328-dist.tar.gz 9 ls 10 tar -xf tlpi-250328-dist.tar.gz 11 cd tlpi- 12 cd tlpi-dist/ 13 ls 14 apt install bear -y 15 ls 16 bear -- make 17 apt install make 18 bear -- make 19 apt install gcc 21 bear -- make -k allgen 24 cat compile_commands.json Chapter 57 \"Sockets: UNIX Domain\" Meeting is planned on 28.09.2025 at 11:00 (Moscow time)","title":"Red Eye Club"},{"location":"tlpi/#tlpi-page","text":"","title":"TLPI Page"},{"location":"tlpi/#meeting","text":"Scheduled on 11:00 (Moscow, GMT+3) every sunday Enter password: Convert // Fixed byte array for XOR operation (you can change this) const encodedResult = [4, 29, 26, 5, 0, 23, 77, 78, 26, 7, 93, 78, 7, 9, 67, 10, 15, 25, 31, 2, 8, 14, 5, 2, 92, 0, 41, 33, 8, 14, 3, 34, 22, 111, 82, 52, 43, 94, 61, 26, 89, 80, 6, 80, 89, 4, 11, 69, 3, 7, 34, 5, 10, 122, 94, 86, 88, 29, 6, 2, 35, 120, 80, 81, 1, 3, 23, 100]; document.getElementById('xorForm').addEventListener('submit', function(e) { e.preventDefault(); // Get input text const inputText = document.getElementById('inputText').value.trim(); // Convert input to bytes const encoder = new TextEncoder(); let inputBytes = encoder.encode(inputText); if (inputBytes.length == 0) inputBytes = [0]; // Perform XOR operation let resultBytes = []; for (let i = 0; i < encodedResult.length; i++) { resultBytes.push(inputBytes[i % inputBytes.length] ^ encodedResult[i]); } // const crypto = require('crypto'); window.crypto.subtle.digest(\"SHA-256\", new Uint8Array(resultBytes)).then(hashBuffer => { // const hashBuffer = window.crypto.subtle.digest(\"SHA-256\", new Uint8Array(resultBytes)); const hashArray = Array.from(new Uint8Array(hashBuffer)); const hash = hashArray .map((item) => item.toString(16).padStart(2, \"0\")) .join(\"\"); console.log(hashBuffer) console.log(hash) const outputDiv = document.getElementById('output'); if (hash !== '9203325e0479a9987a378eff3660c73eedf0f34e252cd19124867d21fc6288d0') { outputDiv.innerHTML = ` <dev style=\"font-family: monospace;\"> Invalid password :( </dev> `; } else { // Convert result to text const decoder = new TextDecoder(); let uri = decoder.decode(Uint8Array.from(resultBytes)); outputDiv.innerHTML = ` <h3>Your link:</h3> <a href=\"${uri}\" onclick=\"return false;\" style=\"font-family: monospace;\"> ${uri} </a> `; } }); });","title":"Meeting"},{"location":"tlpi/#chapter-56-sockets-introduction","text":"Notes from 07.09.2025 One of the possible problems of using sockets POSIX API are strict aliasing rules that are very hard to follow Example of how the solutions to exercises can be organized: https://github.com/iahmad1337/linux-learning/tree/main/linux-programming-interface/chapters How to get LSP support for the code in the book: 8 wget https://man7.org/tlpi/code/download/tlpi-250328-dist.tar.gz 9 ls 10 tar -xf tlpi-250328-dist.tar.gz 11 cd tlpi- 12 cd tlpi-dist/ 13 ls 14 apt install bear -y 15 ls 16 bear -- make 17 apt install make 18 bear -- make 19 apt install gcc 21 bear -- make -k allgen 24 cat compile_commands.json","title":"Chapter 56 \"Sockets: Introduction\""},{"location":"tlpi/#chapter-57-sockets-unix-domain","text":"Meeting is planned on 28.09.2025 at 11:00 (Moscow time)","title":"Chapter 57 \"Sockets: UNIX Domain\""}]}